/**
 * This class represents an Item that is stored in the warehouse.
 * All items have an item number, description, brand name, color, amount in stock,
 * price, weight, length, height and category.
 * An Item also has a discount percentage that can be used to lower the price.
 *
 * @author Lars Mikkel Lødeng Nilsen
 * @since 11.12.2022
 */

public class Item {

    /**
     * The item number of the Item.
     */
    private final String itemNumber;
    /**
     * The description of the Item.
     */
    private final String description;
    /**
     * The brand name of the Item.
     */
    private final String brandName;
    /**
     * The color of the Item.
     */
    private final String color;
    /**
     * The amount of the Item in stock.
     */
    private int amountInStock;
    /**
     * The price of the Item.
     */
    private int price;
    /**
     * The weight of the Item.
     */
    private final double weight;
    /**
     * The length of the Item.
     */
    private final double length;
    /**
     * The height of the Item.
     */
    private final double height;
    /**
     * The category of the Item.
     */
    private final Category category;
    /**
     * The discount percentage of the Item.
     */
    private double discountPercentage = 0;

    /**
     * Constructs a new Item based on given parameters.
     *
     * @param itemNumber         the item number of the Item.
     * @param description        the description of the Item.
     * @param price              the price of the Item.
     * @param brandName          the brand name of the Item.
     * @param weight             the weight of the Item.
     * @param length             the length of the Item.
     * @param height             the height of the Item.
     * @param color              the color of the Item.
     * @param amountInStock      the amount of the Item in stock.
     * @param category           the category of the Item.
     * @param discountPercentage the discount percentage of the Item.
     * @throws IllegalArgumentException if itemNumber, description, color, price, brandName, weight, length,
     *                                  height, amountInStock or discountPercentage is not valid.
     */
    Item(String itemNumber, String description, int price, String brandName, double weight,
         double length, double height, String color, int amountInStock, int category, double discountPercentage)
            throws IllegalArgumentException {
        if (itemNumber.isBlank()) {
            throw new IllegalArgumentException("An item needs to be registered with a item number.");
        }
        if (description.isBlank()) {
            throw new IllegalArgumentException("An item needs to be registered with a description.");
        }
        if (color.isBlank()) {
            throw new IllegalArgumentException("An item needs to be registered with a color");
        }
        if (category < 1 || category > 4) {
            throw new IllegalArgumentException("A category can only have a value from 1 to 4");
        }
        if (price < 0) {
            throw new IllegalArgumentException("Price needs to be a positive number.");
        }
        if (brandName.isBlank()) {
            throw new IllegalArgumentException("An item needs a brand.");
        }
        if (weight <= 0) {
            throw new IllegalArgumentException("Weight needs to be a positive number.");
        }
        if (length <= 0) {
            throw new IllegalArgumentException("Length needs to be a positive number.");
        }
        if (height <= 0) {
            throw new IllegalArgumentException("Height need to be a positive number.");
        }
        if (amountInStock < 0) {
            throw new IllegalArgumentException("Amount in stock needs to be a positive number.");
        }
        if (discountPercentage < 0 || discountPercentage > 100) {
            throw new IllegalArgumentException("Discount can only be a value between 0 and 100;");
        }

        this.itemNumber = itemNumber;
        this.description = description;
        this.price = price;
        this.brandName = brandName;
        this.weight = weight;
        this.length = length;
        this.height = height;
        this.color = color;
        this.amountInStock = amountInStock;
        this.category = Category.fromInteger(category);
        this.discountPercentage = discountPercentage;
    }

    /**
     * Returns the item number of the Item.
     *
     * @return the item number of the Item.
     */
    public String getItemNumber() {
        return this.itemNumber;
    }

    /**
     * Returns the description of the Item.
     *
     * @return the description of the Item.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Returns the price of the Item.
     *
     * @return the price of the Item.
     */
    public int getPrice() {
        return this.price;
    }

    /**
     * Returns the brand name of the Item.
     *
     * @return the brand name of the Item.
     */
    public String getBrandName() {
        return this.brandName;
    }

    /**
     * Returns the weight of the Item.
     *
     * @return the weight of the Item.
     */
    public double getWeight() {
        return this.weight;
    }

    /**
     * Returns the length of the Item.
     *
     * @return the length of the Item.
     */
    public double getLength() {
        return this.length;
    }

    /**
     * Returns the height of the Item.
     *
     * @return the height of the Item.
     */
    public double getHeight() {
        return this.height;
    }

    /**
     * Returns the color of the Item.
     *
     * @return the color of the Item.
     */
    public String getColor() {
        return this.color;
    }

    /**
     * Returns the amount of the Item in stock.
     *
     * @return the amount of the Item in stock.
     */
    public int getAmountInStock() {
        return this.amountInStock;
    }

    /**
     * Returns the category of the Item.
     *
     * @return the category of the Item.
     */
    public Category getCategory() {
        return this.category;
    }

    /**
     * Returns the discount price of the Item.
     *
     * @return the discount price of the Item.
     */
    public double getDiscountPrice() {
        return this.price - this.price * (this.discountPercentage / 100);
    }

    /**
     * Returns the discount percentage of the Item.
     *
     * @return the discount percentage of the Item.
     */
    public double getDiscountPercentage() {
        return this.discountPercentage;
    }

    /**
     * Sets the price of the Item.
     *
     * @param price the new price of the Item.
     */
    public void setPrice(int price) {
        this.price = price;
    }

    /**
     * Sets the amount of the Item in stock.
     *
     * @param amountInStock the new amount of the Item in stock.
     */
    public void setAmountInStock(int amountInStock) {
        this.amountInStock = amountInStock;
    }

    /**
     * Sets the discount percentage of the item.
     *
     * @param discountPercentage The discount percentage of the item.
     */
    public void setDiscountPercentage(double discountPercentage) {
        this.discountPercentage = discountPercentage;
    }

    /**
     * Creates a clone of the current item.
     *
     * @return The cloned item.
     */
    public Item itemClone() {
        Item item = this;
        return new Item(item.getItemNumber(), item.getDescription(), item.getPrice(), item.getBrandName(),
                item.getWeight(), item.getLength(), item.getHeight(), item.getColor(), item.getAmountInStock(),
                item.getCategory().ordinal() + 1, item.getDiscountPercentage());
    }

    /**
     * Returns a string representation of the item.
     *
     * @return The string representation of the item.
     */
    public String toString() {
        return "Item{ " +
                "Item number: " + this.itemNumber + " || " +
                "description: " + this.description + " || " +
                "brandName: " + this.brandName + " || " +
                "color: " + this.color + " || " +
                "price before discount: " + this.price + "kr || " +
                "discount: " + this.discountPercentage + "% ||\n" +
                "price after discount: " + getDiscountPrice() + "kr ||" +
                "amountInStock: " + this.amountInStock + " ||" +
                "category: " + this.category + " || " +
                "weight: " + this.weight + "kg || " +
                "length: " + this.length + "m || " +
                "height: " + this.height + "m }\n";
    }
}

import java.util.ArrayList;

/**
 * ItemRegistry class is used to store and manage a list of items.
 * It provides methods to add, delete, and get items, as well as methods to change the number of items in storage and their prices.
 *
 * @author Lars Mikkel Lødeng Nilsen
 * @since 11.12.2022
 */
public class ItemRegistry {
    private final ArrayList<Item> items;

    /**
     * Creates an instance of ItemRegistry.
     */
    public ItemRegistry(){
        this.items = new ArrayList<>();
    }

    /**
     * Returns a deep copy of the item list.
     * @return a deep copy of the item list
     */
    private ArrayList<Item> getAllItems(){
        final ArrayList<Item> itemList = new ArrayList<Item>();
        for (Item item : this.items) {
            itemList.add(item.itemClone());
        }
        return itemList;
    }

    /**
     * Returns the size of the item list.
     * @return the size of the item list
     */
    public int getItemsSize(){
        return getAllItems().size();
    }

    /**
     * Returns the item with the specified item number.
     * @param itemNumber the item number of the item to return
     * @return the item with the specified item number
     */
    public Item getItemWithItemNumber(String itemNumber){
        for (int i = 0; i < getItemsSize(); i++){
            if (items.get(i).getItemNumber().equals(itemNumber)){
                return items.get(i);
            }
        }
        return null;
    }

    /**
     * Returns the item with the specified description.
     * @param description the description of the item to return
     * @return the item with the specified description
     */
    public Item getItemWithDescription(String description){
        for (int i = 0; i < getItemsSize(); i++){
            if (getAllItems().get(i).getDescription().equals(description)){
                return  getAllItems().get(i);
            }
        }
        return null;
    }

    /**
     * Adds a new item to the item list.
     * @param itemNumber the item number of the item
     * @param description the description of the item
     * @param price the price of the item
     * @param brandName the brand name of the item
     * @param weight the weight of the item
     * @param length the length of the item
     * @param height the height of the item
     * @param color the color of the item
     * @param amountInStock the amount of the item in stock
     * @param category the category of the item
     * @param discountPercentage the discount percentage of the item
     * @throws IllegalArgumentException if an item with the same item number already exists in the item list
     */
    public void addItem(String itemNumber, String description, int price, String brandName, double weight, double length,
                        double height, String color, int amountInStock, int category, double discountPercentage)
            throws IllegalArgumentException {

        final Item newItem = new Item(itemNumber, description, price, brandName, weight, length, height, color, amountInStock, category, discountPercentage);

        if (this.items.contains(newItem)) {
            return;
        }
        // Adds newItem to itemList
        this.items.add(newItem);
    }

    /**
     * Deletes an item from the item list.
     * @param itemNumber the item number of the item to delete
     */
    public void deleteItem(String itemNumber){
        items.remove(getItemWithItemNumber(itemNumber));
    }

    /**
     * Changes the amount of an item in storage.
     * @param itemNumber the item number of the item to change
     * @param change the amount to change the item's amount in storage
     */
    public void changeAmountInStorage(String itemNumber, int change){
        Item item = getItemWithItemNumber(itemNumber);
        item.setAmountInStock(item.getAmountInStock() + change);
    }

    /**
     * Changes the price of an item.
     * @param itemNumber the item number of the item to change
     * @param newPrice the new price of the item
     */
    public void changePrice(String itemNumber, int newPrice){
        getItemWithItemNumber(itemNumber).setPrice(newPrice);
    }

    public void changeDiscount(String itemNumber, double newDiscount){
        getItemWithItemNumber(itemNumber).setDiscountPercentage(newDiscount);
    }

    /**
     * Returns a list of all item numbers in the item list.
     * @return a list of all item numbers in the item list
     */
    public ArrayList<String> getAllItemNumbers(){
        ArrayList<String> itemNumbers = new ArrayList<>();
        for(int i = 0; i < getItemsSize(); i++){
            itemNumbers.add(getAllItems().get(i).getItemNumber());
        }
        return itemNumbers;
    }

    /**
     * Returns a list of all descriptions in the item list.
     * @return a list of all descriptions in the item list
     */
    public ArrayList<String> getAllDescriptions(){
        ArrayList<String> itemDescriptions = new ArrayList<>();
        for(int i = 0; i < getItemsSize(); i++){
            itemDescriptions.add(getAllItems().get(i).getDescription());
        }
        return itemDescriptions;
    }

    /**
     * Returns a string representation of the item list.
     * @return a string representation of the item list
     */
    public String toString() {
        StringBuilder allItems = new StringBuilder();
        for (int i = 0; i < getItemsSize(); i++){
            allItems.append("\n").append(getAllItems().get(i));
        }
        return allItems.toString();
    }
}

import java.util.Scanner;


/**
 * This class is used to manage an item registry.
 * It contains methods to add, delete, search, increase,
 * decrease and change price of items in the registry.
 *
 * @author Lars Mikkel Lødeng Nilsen
 * @since 11.12.2022
 */
public class Main {
  /**
   * The item registry containing the items.
   */
  ItemRegistry items = new ItemRegistry();
  /**
   * A Scanner object used to read user input.
   */
  Scanner sc = new Scanner(System.in);
  private String invalidInput = "Invalid input.\nTry again!\n";
  private String itemNotExist = "There dose not exist a item with that item number.\nTry again!\n";
  private String to = " to: ";
    /**
     * The main method of the class.
     * It is used to call other methods to manage the item registry.
     *
     * @param args the arguments passed to the main method
     */
    public static void main(String[] args) {
        Main main = new Main();
        try {
            main.testData();
        } catch (IllegalArgumentException iae) {
            System.out.println("Invalid input in testData. No items added.");
        }
        main.menu();
    }

    /**
     * A method used to add items to the item registry
     */
    public void testData() {
        items.addItem("abc-321", "2x4 lumber", 600, "Holm AS", 50, 5, 0.02, "yellow", 20, 4, 0);
        items.addItem("fse-434", "door", 2000, "IKEA", 80, 1, 2, "white", 5, 3, 0);
        items.addItem("juh-185", "window", 1400, "ByggMax", 40, 1.4, 1.6, "white", 9, 2, 0);
        items.addItem("kbe-658", "floor laminate", 300, "Byggmakker", 20, 5, 0.02, "black", 45, 1, 0);
    }

    /**
     * A method displaying the main menu used to manage the item registry
     */
    public void menu() {
        boolean flag = true;
        int choice = 0;

        while (flag) {
            System.out.println("\n(1): See all items.");
            System.out.println("(2): Search items.");
            System.out.println("(3): Add a new item.");
            System.out.println("(4): Delete a item.");
            System.out.println("(5): Increase number of a item.");
            System.out.println("(6): Decrease number of a item.");
            System.out.println("(7): Change price of a item.");
            System.out.println("(8): Change discount for a item");
            System.out.println("(9): Quit");

            try {
                choice = Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException nfe) {
                System.out.println(invalidInput);
                continue;
            }

            switch (choice) {
                case 1 -> seeAllItems();
                case 2 -> searchItems();
                case 3 -> addItem();
                case 4 -> deleteItem();
                case 5 -> increaseNumberOfAItem();
                case 6 -> decreaseNumberOfAItem();
                case 7 -> changePrice();
                case 8 -> changeDiscount();
                case 9 -> flag = false;
                default -> System.out.println("You must enter a number between 1 and 9.\nTry again!");
            }
        }
    }

    /**
     * A method used to display all items in the item registry
     */
    public void seeAllItems() {
        if (items.toString().equals("")) {
            System.out.println("There are no items in the register.");
        } else {
            System.out.println(items.toString());
        }
    }

    /**
     * A method used to display all item numbers in the item registry
     */
    public void getAllItemNumbers() {
        System.out.println("Item numbers of all items in the register:");
        System.out.println(items.getAllItemNumbers() + "\n");
    }

    /**
     * This method displays a menu and prompts the user to input a number between 1 and 2 to search for items.
     * If the user inputs 1, then the program moves to the getItemWithItemNumber() method.
     * If the user inputs 2, then the program moves to the getItemWithDescription() method.
     */
    public void searchItems() {
        int choice = 0;
        while (true){
            System.out.println("(1) Search for items based on item number.");
            System.out.println("(2) Search for items based on description.");
            try {
                choice = Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException nfe){
                System.out.println(invalidInput);
                continue;
            }
            switch (choice) {
                case 1 -> getItemWithItemNumber();
                case 2 -> getItemWithDescription();
                default -> {
                    System.out.println("You must enter a number between 1 and 2.");
                    continue;
                }
            }
            break;
        }
    }

    /**
     * This method retrieves an item from the inventory based on the item number provided by the user.
     */
    public void getItemWithItemNumber() {
        while (true) {
            getAllItemNumbers();
            System.out.print("Item number: ");
            String itemNumber = sc.nextLine();
            if (items.getItemWithItemNumber(itemNumber) != null) {
                System.out.println("Item with item number '" + itemNumber + "':\n" + items.getItemWithItemNumber(itemNumber).toString());
                break;
            }
            else {
                System.out.println("No item with item number: " + itemNumber + "\nTry again!\n");
            }
        }
    }

    /**
     * This method retrieves an item from the inventory based on the description provided by the user.
     */
    public void getItemWithDescription() {
        while (true) {
            System.out.println("Descriptions of all items in the register.");
            System.out.println(items.getAllDescriptions());
            System.out.print("\nDescription: ");
            String description = sc.nextLine();
            if (items.getItemWithDescription(description) != null){
                System.out.println("Item whit the description '" + description + "':\n" + items.getItemWithDescription(description).toString());
                break;
            }
            else {
                System.out.println("No item with description: " + description + "\nTry again!\n");
            }
        }
    }

    /**
     * Adds a new item to the list of items.
     * Prompts the user to enter the item number, description, price, brand name, weight, length, height, color, amount in stock, and category.
     * Discount percentage is also prompted and should have a value between 0 and 100.
     * Category should have a value between 1 and 4, where 1 is Floor Laminates, 2 is Windows, 3 is Doors, and 4 is Lumber. 
     */
    public void addItem(){
        System.out.println("Add new item:");
        String itemNumber = addItemStringVariable("Item number: ");
        if (items.getItemWithItemNumber(itemNumber) != null) {
            System.out.println("\nItem already exists.");
        }
        else {
            String description = addItemStringVariable("Description: ");

            int price = addItemIntegerVariable("Price: ");

            String brandName = addItemStringVariable("Brand name: ");

            double weight = addItemDoubleVariable("Weight: ");

            double length = addItemDoubleVariable("Length: ");

            double height = addItemDoubleVariable("Height: ");

            double discountPercent = addItemDiscount();

            String color = addItemStringVariable("Color: ");

            int amountInStock = addItemIntegerVariable("Amount in stock: ");

            int category = addItemCategory();

            items.addItem(itemNumber, description, price, brandName, weight, length, height, color, amountInStock, category, discountPercent);
        }
    }

    /**
     * Helper function for addItem() that takes in a String attribute and prompts the user to enter a String value for the attribute.
     * The value cannot be an empty String.
     * @param attribute The attribute for which the user is prompted to enter a String value.
     * @return The String value for the attribute.
     */
    public String addItemStringVariable(String attribute){
        String attributeVariable = "";
        while (true){
            System.out.print(attribute);
            attributeVariable = sc.nextLine();
            if (!attributeVariable.isBlank()){
                break;
            }
            System.out.println("The variable can't be blank.\nTry again!\n");
        }
        return attributeVariable;
    }

    /**
     * Helper function for addItem() that takes in a String attribute and prompts the user to enter a double value for the attribute.
     * The value cannot be a negative number.
     * @param attribute The attribute for which the user is prompted to enter a double value.
     * @return The double value for the attribute.
     */
    public double addItemDoubleVariable(String attribute){
        double attributeValue = 0;
        while (true) {
            System.out.print(attribute);
            try {
                attributeValue = Double.parseDouble(sc.nextLine());
            } catch (NumberFormatException nfe) {
                System.out.println(invalidInput);
                continue;
            }
            if (attributeValue < 0){
                System.out.println("This value can't be a negative number.\nTry again!\n");
            }
            else break;
        }
        return attributeValue;
    }

    /**
     * Helper function for addItem() that takes in a String attribute and prompts the user to enter an integer value for the attribute.
     * The value cannot be a negative number.
     * @param attribute The attribute for which the user is prompted to enter an integer value.
     * @return The integer value for the attribute.
     */
    public int addItemIntegerVariable(String attribute){
        int attributeValue = 0;
        while (true) {
            System.out.print(attribute);
            try {
                attributeValue = Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException nfe) {
                System.out.println(invalidInput);
                continue;
            }
            if (attributeValue < 0){
                System.out.println("This value can't be a negative number.\nTry again!\n");
            }
            else break;
        }
        return attributeValue;
    }

    /**
     * Helper function for addItem() that prompts the user to enter a double value for the discount percentage.
     * The value must have a value between 0 and 100.
     * @return The double value for the discount percentage.
     */
    public double addItemDiscount(){
        double discountPercentage = 0;
        while (true) {
            System.out.print("Discount (percent): ");
            try {
                discountPercentage = Double.parseDouble(sc.nextLine());
            } catch (NumberFormatException nfe) {
                System.out.println(invalidInput);
                continue;
            }
            if (discountPercentage < 0 || discountPercentage > 100){
                System.out.println("DiscountPercentage must have a value between 0 and 100.\nTry again!\n");
            }
            else break;
        }
        return discountPercentage;
    }

    /**
     * Helper function for addItem() that prompts the user to enter an integer value for the category.
     * The value must have a value between 1 and 4, where 1 is Floor Laminates, 2 is Windows, 3 is Doors, and 4 is Lumber.
     * @return The integer value for the category.
     */
    public int addItemCategory(){
        int category = 0;
        while (true) {
            System.out.print("(1): Floor laminates\n(2): Windows\n(3): Doors\n(4): Lumber\nCategory: ");
            try {
                category = Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException nfe) {
                System.out.println(invalidInput);
                continue;
            }
            if (category < 1 || category > 4){
                System.out.println("Category must have a value between 1 and 4.\nTry again!\n");
            }
            else break;
        }
        return category;
    }
    /**
     * Deletes an item from the register given an item number.
     * <p>
     * This method prompts the user to enter an item number and then displays a confirmation prompt. If the user confirms
     * the item is deleted from the register. Otherwise, the user is returned to the menu.
     */
    public void deleteItem() {
        boolean flag = true;
        int choice2 = 0;
        getAllItemNumbers();
        while (true) {
            System.out.println("(1): Exit to menu.");
            System.out.print("Item number of item you want to delete: ");
            String itemNumber = sc.nextLine();
            if (itemNumber.equals("1")) {
                break;
            }
            if (items.getItemWithItemNumber(itemNumber) == null) {
                System.out.println(itemNotExist);
                continue;
            }
            while (flag) {
                System.out.println("Are you sure you want to delete item: '" + itemNumber + "'?");
                System.out.println("(1): YES!");
                System.out.println("(2): NO!");
                try {
                    choice2 = Integer.parseInt(sc.nextLine());
                } catch (NumberFormatException nfe) {
                    System.out.println(invalidInput);
                    continue;
                }

                switch (choice2) {
                    case (1):
                        items.deleteItem(itemNumber);
                        System.out.println("'" + itemNumber + "' has been deleted from the register.");
                        flag = false;
                        break;
                    case (2):
                        flag = false;
                        break;
                    default:
                        System.out.println("You must enter a number between 1 and 2.");
                }
            }
        }
    }



    /**
     * This method is used to increase the number of a specific item in stock. It takes a user provided item number and asks how much to increase the item by.
     * If the user provides an invalid input or a negative number, they will be prompted to try again. If the item number provided is valid, then the 
     * amount in stock of the item is increased by the given amount.
     */
    public void increaseNumberOfAItem() {
        boolean flag = true;
        int change = 0;
        getAllItemNumbers();
        do {
            System.out.print("Item number of the item you want to increase number of in stock: ");
            String itemNumber = sc.nextLine();
            if (items.getItemWithItemNumber(itemNumber) == null) {
                System.out.println(itemNotExist);
                continue;
            }
            while (true) {
                System.out.println(items.getItemWithItemNumber(itemNumber).toString());
                System.out.print("How much do you want to increase item '" + itemNumber + "' with: ");
                try {
                    change = Integer.parseInt(sc.nextLine());
                } catch (NumberFormatException nfe) {
                    System.out.println(invalidInput);
                    continue;
                }
                if (change >= 0) {
                    System.out.println("The amount in stock for item '" + itemNumber + "' is changed from: " + items.getItemWithItemNumber(itemNumber).getAmountInStock() + to + (items.getItemWithItemNumber(itemNumber).getAmountInStock() + change));
                    items.changeAmountInStorage(itemNumber, change);
                    flag = false;
                    break;
                }
                System.out.println("The program does not accept negative numbers for change.\nTry again!\n");
            }
        } while (flag);
    }


    /**
     * This method is used to decrease the number of a specific item in stock. It takes a user provided item number and asks how much to decrease the item by.
     * If the user provides an invalid input or a negative number, they will be prompted to try again. If the item number provided is valid, then the 
     * amount in stock of the item is decreased by the given amount. The amount in stock can not be decreased to a negative number.
     */
    public void decreaseNumberOfAItem() {
        boolean flag = true;
        int change = 0;
        getAllItemNumbers();
        do {
            System.out.print("Item number of the item you want to decrease number of in stock: ");
            String itemNumber = sc.nextLine();
            if (items.getItemWithItemNumber(itemNumber) == null) {
                System.out.println(itemNotExist);
                continue;
            }
            while (true) {
                System.out.println(items.getItemWithItemNumber(itemNumber).toString());
                System.out.print("How much do you want to decrease item '" + itemNumber + "' by: ");
                try {
                    change = Integer.parseInt(sc.nextLine());
                } catch (NumberFormatException nfe) {
                    System.out.println(invalidInput);
                    continue;
                }
                if (change >= 0) {
                    if ((items.getItemWithItemNumber(itemNumber).getAmountInStock() - change) >= 0) {
                        System.out.println("The amount in stock for item '" + itemNumber + "' is changed from: " + items.getItemWithItemNumber(itemNumber).getAmountInStock() + to + (items.getItemWithItemNumber(itemNumber).getAmountInStock() - change));
                        items.changeAmountInStorage(itemNumber, -change);
                        flag = false;
                        break;
                    }
                    System.out.println("Amount in stock: " + items.getItemWithItemNumber(itemNumber).getAmountInStock());
                    System.out.println(items.getItemWithItemNumber(itemNumber).getAmountInStock() + " - " + change + " = " + (items.getItemWithItemNumber(itemNumber).getAmountInStock() - change));
                    System.out.println("Amount in stock can't be a negative number.\nTry again!\n");

                }
                System.out.println("The program does not accept negative numbers for change.\nTry again!\n");
            }
        } while (flag);
    }


    /**
     * Changes the price of an item.
     * This method will prompt the user to enter the item number of the item they want to change the price of.
     * The user will then be asked to enter the new price for the item.
     * The old price is then compared to the new price, and if the new price is not negative, the price is changed. 
     */
    public void changePrice() {
        boolean flag = true;
        int newPrice = 0;
        getAllItemNumbers();
        do {
            System.out.print("Item number of the item you want to change price of: ");
            String itemNumber = sc.nextLine();
            if (items.getItemWithItemNumber(itemNumber) == null) {
                System.out.println(itemNotExist);
                continue;
            }
            while (true) {
                System.out.println(items.getItemWithItemNumber(itemNumber).toString());
                System.out.println("What is the new price for item '" + itemNumber + "': ");
                try {
                    newPrice = Integer.parseInt(sc.nextLine());
                } catch (NumberFormatException nfe) {
                    System.out.println(invalidInput);
                    continue;
                }
                if (newPrice >= 0) {
                    System.out.println("The price was change from: " + items.getItemWithItemNumber(itemNumber).getPrice() + to + newPrice);
                    items.changePrice(itemNumber, newPrice);
                    flag = false;
                    break;
                }
                System.out.println("An item can't have a negative price\nTry again!\n");
            }
        } while (flag);
    }


    public void changeDiscount() {
        boolean flag = true;
        double newDiscount = 0;
        getAllItemNumbers();
        do {
            System.out.print("Item number of the item you want to change price of: ");
            String itemNumber = sc.nextLine();
            if (items.getItemWithItemNumber(itemNumber) == null) {
                System.out.println(itemNotExist);
                continue;
            }
            while (true) {
                System.out.println(items.getItemWithItemNumber(itemNumber).toString());
                System.out.println("What is the new discount for item '" + itemNumber + "' (in percent): ");
                try {
                    newDiscount = Double.parseDouble(sc.nextLine());
                } catch (NumberFormatException nfe) {
                    System.out.println(invalidInput);
                    continue;
                }
                if (newDiscount > 0 || newDiscount < 100) {
                    System.out.println("The discount was change from: " + items.getItemWithItemNumber(itemNumber).getDiscountPercentage() + to + newDiscount);
                    items.changeDiscount(itemNumber, newDiscount);
                    flag = false;
                    break;
                }
                System.out.println("The discount needs to be between 0 and 100%\nTry again!\n");
            }
        } while (flag);
    }
}

/**
 * An enumeration of categories for different items.
 *
 * @author Lars Mikkel Lødeng Nilsen
 * @since 11.12.2022
 */
public enum Category {
    /**
     * A category for floor laminates.
     */
    FLOOR_LAMINATE,
    /**
     * A category for windows.
     */
    WINDOWS,
    /**
     * A category for doors.
     */
    DOORS,
    /**
     * A category for lumber.
     */
    LUMBER;

    /**
     * Returns a {@code Category} instance for the given integer.
     *
     * @param x the integer representing a category
     * @return a {@code Category} instance for the given integer
     */
    public static Category fromInteger(int x){
        try {
            return Category.values()[x - 1];
        } catch (Exception e) {
            System.out.println(e);
            return Category.FLOOR_LAMINATE;
        }
    }
}

